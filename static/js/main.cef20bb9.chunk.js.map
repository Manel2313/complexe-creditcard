{"version":3,"sources":["components/images/puce.png","components/images/visa.png","components/images/master-card.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNumber","e","isNaN","target","value","alert","setState","number","addName","match","name","addExpiry","expiry","state","month","year","react_default","a","createElement","className","src","puce","alt","padEnd","split","map","x","i","join","master","visa","type","onChange","placeholder","pattern","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cef20bb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/puce.8bc50203.png\";","module.exports = __webpack_public_path__ + \"static/media/visa.8486189a.png\";","module.exports = __webpack_public_path__ + \"static/media/master-card.5ac573df.png\";","import React, { Component } from 'react'\nimport './components/card.css'\nimport puce from './components/images/puce.png'\nimport visa from './components/images/visa.png'\nimport master from './components/images/master-card.png'\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = ({\n      number: '',\n      name: '',\n      expiry: '',\n      month: '',\n      year: ''\n    })\n  }\n\n  addNumber = (e) => {\n    if (isNaN(e.target.value)) {\n      alert('Please enter a number')\n    }\n    else {\n      this.setState({\n        number: e.target.value\n      });\n    }\n  }\n\n  addName = (e) => {\n    let X = /^[A-Z a-z]+$/;\n    if (e.target.value.match(X)) {\n      this.setState({\n        name: e.target.value\n      });\n    } else { alert('The name must be a string') }\n  }\n\n  addExpiry = (e) => {\n    if (isNaN(e.target.value)) {\n      alert('Please enter a number')\n    }\n    else {\n      this.setState({\n        expiry: e.target.value\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"cardy\">\n          <div>\n            <h1 className=\"title\">CREDIT CARD</h1>\n            <img className=\"image-puce\" src={puce} alt=\"puce\" />\n            <div className=\"card-info\">\n              <div className=\"numbers\">\n                <div className=\"n-card\">\n                  <p>{this.state.number.padEnd(16, '*').split('').map((x, i) => { return i % 4 === 0 ? \" \" + x : x }).join('')}</p>\n                </div>\n                <div className=\"num-et-date\">\n                  <p className=\"num-4-chiffre\"></p>\n                  <div className=\"validite\">\n                    <div className=\"thru\">\n                      <p className='val'>VALID <br />THRU </p>\n                      <i className=\"fas fa-caret-right\"></i>\n                    </div>\n                    <div>\n                      <p className='val val-margin'>MONTH/YEAR</p>\n                      <p>{this.state.expiry.padEnd(4, '*').split('').map((x, i) => { return i % 2 === 0 ? \"/\" + x : x }).join('')}</p>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"cardholder\">{this.state.name.padEnd(6, 'HOLDER')}</p>\n              </div>\n              <div className=\"cards\">\n                <div className=\"logo-cards\">\n                  <img className=\"image-master\" src={master} alt=\"masterCard\" />\n                  <img className=\"image-visa\" src={visa} alt=\"visaCard\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"saisie\">\n          <input type=\"text\" onChange={this.addNumber} placeholder=\"CreditCard Number\" pattern=\"[\\d| ]{16}\" />\n          <input type=\"text\" onChange={this.addName} placeholder=\"Cardholder\" />\n          <input type=\"text\" onChange={this.addExpiry} placeholder=\"Valid Thru - (11/11)\" pattern=\"\\d\\d/\\d\\d\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}